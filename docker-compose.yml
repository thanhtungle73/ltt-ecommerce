version: "3.9"
services:
  postgres:
    container_name: postgres
    restart: unless-stopped
    image: postgres:14.0-alpine
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    networks:
      - internal
    volumes:
      - ~/application/db-data:/var/lib/postgresql/data/

  strapi:
    build: ./backend
    container_name: strapi
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      APP_KEYS: ${APP_KEYS}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      CLIENT_URL: ${CLIENT_URL}
      PUBLIC_STRAPI_URL: ${PUBLIC_STRAPI_URL}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ~/application/uploads:/backend/public/uploads
    networks:
      - internal
    depends_on:
      - postgres

  frontend:
    build: ./frontend
    container_name: frontend
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - strapi

  nginx:
    build: ./nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ~/application/certs:/etc/ssl/certs
      - ~/application/log/nginx:/var/log/nginx
    networks:
      - internal
    depends_on:
      - strapi
      - frontend

networks:
  internal:
    name: internal-network
    driver: bridge